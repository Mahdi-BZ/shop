const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const cookieParser = require('cookie-parser');
const mongoose = require('mongoose');
const session = require('express-session');
const MongoStore = require('connect-mongo')(session);
const db = require('./models/models');
const multer = require('multer');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const config = require('./others/config');


mongoose.Promise = global.Promise;
mongoose.connect(`mongodb://${config.username}:${config.password}@ds133981.mlab.com:33981/project_db`);


app.set('views', path.join(__dirname,'views'));
app.set('view engine', 'pug' )

app.use(bodyParser.urlencoded({extended:false}));
app.use(bodyParser.json());
app.use(cookieParser());
app.use(cors());
app.use(express.static(path.join(__dirname,'Public')));

app.use(session({ 
	secret: 'hijklfjef{-+kijhyddss',
	resave: true,
	saveUninitialized: false,
	store: new MongoStore({ mongooseConnection: mongoose.connection })
}));


app.get('/inscription', function(req, res){
  if(!req.session.user){
	res.render('inscription', {
	  url : req.url
	});
  }
  else {
	res.redirect('/');
  }
});

app.post('/inscription', multer({dest: 'Public/uploads/profilePics'}).single('photo'), function(req, res){
  var user = new db.user({
  	email: req.body.email,
	password: req.body.password,
	name: req.body.name,
	lastName: req.body.lastName,
	lycee: req.body.lycee,
	photo: req.file.filename
  });
  user.save((err) => {
  	if(err) res.json({err: err});
  	else res.json({success: 'account has been created successfuly'});
  })
});

app.get('/login', function(req, res){
  if(!req.session.user){
	res.render('login', {
	  url: req.url
	});
  }
  else {
	res.redirect('/');
  }


});


app.post('/login', function(req, res){
  db.user.findOne({email: req.body.email}).catch((err) => {if(err)console.log(err);}).then((user) => {
  	if(user) {
  		if(user.compPass(req.body.password)){
  			req.session.user = user._id;
  			res.json({success: 'you are logged in'});
  		}
  		else {
  			res.json({err: 'password is wrong'});
  		}
  	}
  	else {
  		res.json({err: 'email does not exist'});
  	}
  });

});



app.get('/logout', function(req, res){
  delete req.session.destroy((err)=>{
  	if(err) console.log(err);
  	res.redirect('/login')
  });
});



app.get('/', function(req, res){
  if(req.session.user)
  {
  	db.user.findOne({_id: req.session.user}).then((user) => {
  		user.password = undefined;
		db.item.find().populate('user').catch((err) => {if(err)console.log(err);}).then((items) => {
			res.render('index',{
				user: user,
				items: items
			});
		});
	});	
  }
  else {
	res.redirect('/login');
  }
});

app.get('/add', function(req, res){
  if(req.session.user){
	res.render('add', {
	url: req.url
	});
  }
  else {
	res.redirect('/login');
  }

});

app.post('/add', multer({dest: 'Public/uploads/itemPics'}).single('photo'), function(req, res){
  db.item.create({
  	user: req.session.user,
  	title: req.body.title,
  	description: req.body.description,
	price: req.body.price,
	category: req.body.category,
	photo: req.file.filename
  }).then(() => {
  	res.redirect('/');
  });
});

app.get('/:category', function(req, res){
  if(req.session.user){
	db.user.findOne({_id: req.session.user}).catch((err) => {if(err)console.log(err);}).then((user) => {
		db.item.find({
			category: req.params.category.toLowerCase()
		}).populate('user').catch((err)=>{if(err)console.log(err);}).then((items) => {
			res.render('category', {
				items: items,
				category: req.params.category,
				user: user
			})
		});
	});
  }
  else{
	res.redirect('/login');
  }
});

mongoose.connection.once('open', () => {	
  app.listen(5000, function(){
	console.log('Server listening on port 5000')
  });
});
